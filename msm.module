<?php

/**
 * @file
 * msm.module
 */


/**
 * Implements hook_menu()
 */
function msm_menu() {
  $items = array();
  $inc_path = drupal_get_path('module', 'msm') . '/includes';
  $items['admin/msm'] = array(
    'title' => 'MongoDB Schema Manager',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer msm'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'menu_name' => 'management',
  );

  $items['admin/msm/status'] = array(
    'title' => 'API Status',
    'description' => 'Check the status of the msm api service.',
    'page callback' => 'msm_status_page',
    'access arguments' => array('administer msm'),
    'weight' => 100,
  );
  $items['admin/msm/tests'] = array(
    'title' => 'Tests',
    'description' => 'View and run tests.',
    'page callback' => 'msm_tests_page',
    'access arguments' => array('administer msm'),
    'weight' => 99,
    'file path' => $inc_path,
    'file' => 'tests.inc',
  );
  $items['admin/msm/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure MSM Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_settings_form'),
    'access arguments' => array('administer msm'),
    'weight' => 99,
  );
  $items['admin/msm/col'] = array(
    'title' => 'Collections',
    'description' => 'Manage and extend MongoDB schemas.',
    'page callback' => 'msm_collection_list',
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => -10,
    'menu_name' => 'management',
  );
  $items['admin/msm/col/create'] = array(
    'title' => 'Create collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_form'),
    'access arguments' => array('administer msm'),
    'type' => MENU_LOCAL_ACTION,
    'file path' => $inc_path,
    'file' => 'collection.inc',
  );
  $items['admin/msm/col/%msm_collection'] = array(
    'title callback' => 'msm_collection_title',
    'title arguments' => array(3),
    'page callback' => 'msm_collection_view',
    'page arguments' => array(3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3),
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'menu_name' => 'management',
  );
  $items['admin/msm/col/%msm_collection/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );
  $items['admin/msm/col/%msm_collection/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'edit'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => -91,
  );
  $items['admin/msm/col/%msm_collection/clone'] = array(
    'title' => 'Clone',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_clone_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'view'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => 91,
  );
  $items['admin/msm/col/%msm_collection/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_settings_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'settings'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => -90,
  );
  $items['admin/msm/col/%msm_collection/tests'] = array(
    'title' => 'Tests',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_tests_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'edit'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => -1,
  );
  $items['admin/msm/col/%msm_collection/map-reduce'] = array(
    'title' => 'Map Reduce',
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'mapReduce'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_mapreduce_form', 3),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'mapreduce_form.inc',
    'weight' => 0
  );
  $items['admin/msm/col/%msm_collection/pipeline'] = array(
    'title' => 'Pipeline',
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'pipeline'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_pipeline_form', 3),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'pipeline_form.inc',
    'weight' => 0
  );
  $items['admin/msm/col/%msm_collection/custom'] = array(
    'title' => 'Custom Eval',
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'eval'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_eval_form', 3),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'eval_form.inc',
    'weight' => 0
  );
  $items['admin/msm/col/%msm_collection/schema'] = array(
    'title' => 'Schema',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_schema_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'schema-edit'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'schema_form.inc',
    'weight' => -1,
  );
  $items['admin/msm/col/%msm_collection/schema/view'] = array(
    'title' => 'View',
    'page callback' => 'msm_collection_schema_view',
    'page arguments' => array(3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'schema-view'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
  );
  $items['admin/msm/col/%msm_collection/schema/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/msm/col/%msm_collection/schema/analyze'] = array(
    'title' => 'Analyze Schema',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_schema_analyze_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'schema-analyze'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => 10,
  );
  $items['admin/msm/col/%msm_collection/schema/reset'] = array(
    'title' => 'Reset',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_reset_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'reset'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => 15,
  );
  $items['admin/msm/col/%msm_collection/process'] = array(
    'title' => 'Process',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_process_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'process'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
  );
  $items['admin/msm/col/%msm_collection/endpoint'] = array(
    'title' => 'Endpoint',
    'page callback' => 'msm_collection_endpoint',
    'page arguments' => array(3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'endpoint'),
    'type' => MENU_LOCAL_TASK,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => 10,
  );
  $items['admin/msm/col/%msm_collection/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_collection_delete_form', 3),
    'access callback' => 'msm_collection_access',
    'access arguments' => array(3, 'delete'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file path' => $inc_path,
    'file' => 'collection.inc',
    'weight' => 100,
  );
  $items['admin/msm/db'] = array(
    'title' => 'Databases',
    'description' => 'Manage the available databases.',
    'page callback' => 'msm_database_list',
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'database.inc',
  );
  $items['admin/msm/db/add'] = array(
    'title' => 'Add database',
    'description' => 'Add a new database to MSM',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_database_add_form'),
    'access arguments' => array('administer msm'),
    'type' => MENU_LOCAL_ACTION,
    'file path' => $inc_path,
    'file' => 'database.inc',
  );
  $items['admin/msm/db/enable/%'] = array(
    'title' => 'Enable database',
    'page callback' => 'msm_database_enable',
    'page arguments' => array(5),
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'database.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/msm/db/%msm_database'] = array(
    'title callback' => 'msm_database_title',
    'title arguments' => array(3, 'edit'),
    'page callback' => 'msm_database_view',
    'page arguments' => array(3),
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'database.inc',
  );
  $items['admin/msm/db/%msm_database/view'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'View',
  );
  $items['admin/msm/db/%msm_database/disable'] = array(
      'title' => 'Disable database',
      'page callback' => 'msm_database_disable',
      'page arguments' => array(3),
      'access arguments' => array('administer msm'),
      'file path' => $inc_path,
      'file' => 'database.inc',
      'type' => MENU_CALLBACK,
  );
  $items['admin/msm/db/%msm_database/delete'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_database_delete_form', 3),
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'database.inc',
  );
  $items['admin/msm/db/%msm_database/analyze-schema/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Analyze Collection Schema',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msm_database_analyze_schema_form', 3, 5),
    'access arguments' => array('administer msm'),
    'file path' => $inc_path,
    'file' => 'database.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function msm_theme() {
  $path = drupal_get_path('module', 'msm') . '/theme';
  return array(
    'msm_info' => array(
      'variables' => array('items' => array(), 'title' => null),
      'file' => 'msm.theme.inc',
    ),
    'msm_collection_view' => array(
      'template' => 'msm-collection-view',
      'variables' => array(
        'info' => array(),
        'schema_info' => array(),
        'schema' => array(),
        'test_result' => array(),
      ),
      'path' => $path,
    ),
    'msm_schema_table' => array(
      'variables' => array('schema' => array(), 'flatten' => TRUE),
      'file' => 'msm.theme.inc',
    ),
    'msm_project_schema_table' => array(
      'file' => 'msm.theme.inc',
      'render element' => 'form',
    ),
    'msm_group_schema_table' => array(
      'file' => 'msm.theme.inc',
      'render element' => 'form',
    ),
    'msm_mapreduce_schema_table' => array(
      'file' => 'msm.theme.inc',
      'render element' => 'form',
    ),
    'msm_finalize_schema_table' => array(
      'file' => 'msm.theme.inc',
      'render element' => 'form',
    ),
    'msm_variables_help' => array(
      'file' => 'msm.theme.inc',
      'variables' => array('items' => array(), 'title' => null),
    ),
    'msm_variables_help_item' => array(
      'variables' => array('item' => array()),
      'path' => $path,
      'template' => 'msm-variables-help-item',
    ),
    'msm_schema_result_tree' => array(
      'variables' => array('schema' => array(), 'result' => array(), 'array_item_limit' => 3),
      'file' => 'msm.theme.inc',
    ),
    'msm_schema_field_label' => array(
      'variables' => array('field_name' => null, 'field_info' => array(), 'key' => 'title'),
      'file' => 'msm.theme.inc',
    ),
  );
}

function msm_database_load($id) {
  $result = msm_request(sprintf('database/%s', check_plain($id)));
  return empty($result) ? FALSE : $result;
}

function msm_collection_load($id) {
  $result = msm_request(sprintf('collection/%s', check_plain($id)));
  return empty($result['_id']) ? FALSE : $result;
}

function msm_status_page() {
  $build = array();
  $result = msm_request('status');
  $header = array(t('Service'), t('Status'));
  $rows = array();
  if ($result === NULL) {
    $rows[0] = array(t('API Server'), t('Not responding'));
    $rows[1] = array(t('Database Server'), t('Unknown'));
  }
  elseif($result['ok'] !== 1) {
    $rows[0] = array(t('API Server'), t('Not responding'));
    $rows[1] = array(t('Database Server'), t('Unknown'));
  }
  else {
    $rows[0] = array(t('Express API Server'), t('Running'));
    $rows[1] = array(t('MongoDB Database Server'), t('Running'));
    $rows[0][] = variable_get('msm_host', 'http://127.0.0.1:3000');
    $rows[1][] = sprintf('%s (version %s)', $result['host'], $result['version']);
    $header[] = t('Host');
    dsm($result);
    $build['database'] = array(
      '#prefix' => sprintf('<h3>%s</h3>', t('Database Info')),
      '#theme' => 'table',
      '#rows' => array(
        array('Host:', $result['host']),
        array('Version:', $result['version']),
        array('Process:', $result['process']),
        array('Pid:', $result['pid']),
        array('Uptime:', $result['uptime']),
        array('Local time:', $result['localTime'])
      ),
    );
    $build['connections'] = array(
      '#prefix' => sprintf('<h3>%s</h3>', t('Database Connections')),
      '#theme' => 'table',
      '#rows' => array(
        array('Current:', $result['connections']['current']),
        array('Available:', $result['connections']['available']),
        array('Total created:', $result['connections']['totalCreated']),
      ),
    );
  }
  $build['status'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#weight' => -100,
  );
  return $build;
}

function msm_database_options() {
  $options = &drupal_static(__FUNCTION__);
  if (!isset($options)) {
    $result = msm_request('databases');
    $options = array();
    foreach ($result AS $db) {
      if ($db['enabled']) {
        $options[$db['name']] = $db['name'];
      }
    }
  }
  return $options;
}

function msm_collection_access($collection, $op = null) {
  $collection += array(
    'type' => 'existing',
    'published' => null,
  );
  if (!user_access('administer msm')) return FALSE;

  if ($op === null) {
    return !empty($collection['_id']);
  }

    switch ($op) {
      case 'view':
      case 'schema-view':
        return TRUE;
      case 'schema-analyze':
      case 'edit':
      case 'delete':
        return empty($collection['locked']);
      case 'settings':
      case 'schema-reset':
      case 'reset':
        return !empty($collection['schema']) && empty($collection['locked']);
      case 'schema-edit':
      case 'endpoint':
        return !empty($collection['schema']);
      default: return FALSE;
    }
  return FALSE;
  switch ($op) {
    case 'edit': return TRUE;
    case 'view':
      // Nothing to view until enabled
      return $collection['enabled'];
    case 'map-reduce':
    case 'mapReduce':
      return $collection['type'] == 'mapReduce';
    case 'pipeline':
      return $collection['type'] == 'aggregation';
    case 'eval':
      return in_array($collection['type'], array('custom', 'import'));
    case 'schema-view':
    case 'schema-edit':
      if (!empty($collection['schemaImported'])) {
        return TRUE;
      }
      switch ($collection['type']) {
        case 'mapReduce': return !empty($collection['mapReduce']);
        case 'aggregation': return !empty($collection['pipeline']);
        case 'import':
        case 'custom':
            return !empty($collection['eval']);
        default: throw new Exception(t('Unknown collection type: %collection_type', array('%collection_type' => $collection['type'])));
      }
      break;
    case 'schema-reset':
    case 'reset':
      return !empty($collection['schema']);
    case 'schema-analyze':
    case 'analyze':
      return !isset($collection['locked']);
    case 'settings':
      return !empty($collection['schema']);
    case 'endpoint':
      return !empty($collection['schema']) && $collection['enabled'];
  }
  return FALSE;
}

function msm_collection_title($collection, $op = null) {
  return check_plain($collection['_id']);
  return t('Collection: @id', array('@id' => $collection['_id']));
}

define('MSM_SCHEMA_FLATTEN_GROUPS', 0x1);
define('MSM_SCHEMA_FLATTEN_FIELDS', 0x2);
define('MSM_SCHEMA_FLATTEN_ALL', MSM_SCHEMA_FLATTEN_GROUPS + MSM_SCHEMA_FLATTEN_FIELDS);

function msm_schema_flatten_fields($schema, $types = MSM_SCHEMA_FLATTEN_FIELDS, $ns = null) {
  $result = array();
  foreach ($schema AS $f => $v) {
    $cns = $ns ? sprintf('%s.%s', $ns, $f) : $f;
    $v += array('display' => array());
    $v['display'] += array('weight' => 0);
    if ($ns) {
      $v['parent'] = $ns;
    }
    $v['parents'] = explode('.', $cns);
    if (in_array($v['type'], array('group', 'array'))) {
      if ($types & MSM_SCHEMA_FLATTEN_GROUPS || ($v['type'] == 'array' && !empty($v['children']))) {
        $result[$cns] = $v;
      }
      if (!empty($v['children'])) {
        //$result = array_merge(msm_schema_flatten_fields($v['children'], $types, $cns), $result);
        $result = array_merge($result, msm_schema_flatten_fields($v['children'], $types, $cns));
      }
    }
    elseif ($types & MSM_SCHEMA_FLATTEN_FIELDS) {
      $result[$cns] = $v;
    }
  }
  return $result;
}

function msm_schema_expand_fields(array $fields) {
  $schema = array();
  foreach ($fields AS $f => $fi) {
    $parents = explode('.', implode('.children.', explode('.', $f)));
    drupal_array_set_nested_value($schema, $parents, $fi, TRUE);
  }
  return $schema;
}

function msm_schema_field_options($schema, $types = MSM_SCHEMA_FLATTEN_FIELDS) {
  $fields = msm_schema_flatten_fields($schema, $types);
  $options = array();
  foreach ($fields AS $f => $v) {
    $options[$f] = $f;
  }
  return $options;
}

/**
 * Removes the formatter field from a text_format form element.
 *
 * Usage:
 * @code
 * $form['myvar'] = array(
 *   '#type' => 'text_format',
 *   '#format' => 'catalyst_js',
 *   '#after_build' => array('msm_text_format_after_build')
 * );
 * @endcode
 */
function msm_text_format_after_build($element) {
  $element['format']['#access'] = FALSE;
  return $element;
}

function msm_text_format_validate(&$element, &$form_state) {
  $parents = $element['#parents'];
  if (!in_array('value', $parents)) {
    $parents[] = 'value';
  }
  $exists = null;
  $value = drupal_array_get_nested_value($form_state['values'], $parents, $exists);
  if ($exists) {
    if (empty($value)) $value = false;
    array_pop($parents);
    drupal_array_set_nested_value($form_state['values'], $parents, $value);
  }
}

function msm_collection_options($grouped = FALSE) {
  $options = &drupal_static(__FUNCTION__);
  if (!isset($options)) {
    $options = array('grouped' => array(), 'ungrouped' => array());
    $result = msm_request('collections');
    foreach ($result AS $col) {
      if ($col['enabled']) {
        $text = t('@title (@database:@collectionName)', array(
          '@title' => $col['name'],
          '@database' => $col['database'],
          '@collectionName' => $col['collection'],
        ));
        $options['ungrouped'][$col['_id']] = $text;
        if (!isset($options[$col['database']])) {
          $options[$col['database']] = array();
        }
        $options['grouped'][$col['database']][$col['_id']] = $text;
      }
    }
  }
  return $grouped ? $options['grouped'] : $options['ungrouped'];
}

function msm_schema_sort($schema, $ns = null) {
  uasort($schema, function ($a, $b) {
    $a += array('display' => array());
    $b += array('display' => array());
    $a['display'] += array('weight' => 0);
    $b['display'] += array('weight' => 0);
    if ($a['display']['weight'] < $b['display']['weight']) return -1;
    if ($a['display']['weight'] > $b['display']['weight']) return 1;
    return 0;
  });
  foreach (array_keys($schema) AS $fn) {
      if (!empty($schema[$fn]['children'])) {
          $schema[$fn]['children'] = msm_schema_sort($schema[$fn]['children']);
      }
  }
  return $schema;
}

function msm_collection_info($collection, array $options = array()) {
  $options += array(
    'info' => TRUE,
    'schema_info' => TRUE,
  );
  $build = array();
  $has_schema = !empty($collection['schema']);
  if ($options['info']) {
    $count = msm_request(sprintf('collection/%s/count', $collection['_id']));
    $build['info'] = array(
      '#theme' => 'msm_info',
      '#items' => array(
        '_id' => array(t('Collection ID'), $collection['_id']),
        'name' => array(t('Name/Label'), $collection['name']),
        'collection' => array(t('Collection Name'), $collection['collection']),
        'database' => array(t('Database'), l($collection['database'], 'admin/msm/db/' . $collection['collection'])),
        'type' => array(t('Collection Type'), $collection['type']),
        'schema' => array(t('Has Schema'), $has_schema ? t('Yes') : t('No')),
        'totalDocuments' => array(t('Total Documents:', number_format($count, 0))),
      ),
    );
    if (!empty($collection['source'])) {
      $build['info']['items'][] = array(t('Source Collection ID'), l($collection['source'], 'admin/msm/col/' . $collection['source']));
    }
  }
  if ($options['schema_info'] && $has_schema) {
    $fields = msm_schema_flatten_fields($collection['schema'], MSM_SCHEMA_FLATTEN_ALL);
    $build['schema_info'] = array(
      '#theme' => 'msm_info',
      '#items' => array(
        'total_fields' => array(t('Total fields'), count($fields)),
      ),
    );
    $unused_fields = array();
    $counts = [];
    foreach ($fields AS $field_name => $field) {
      if (isset($field['percentContaining']) && $field['percentContaining'] <= 0) {
        $unused_fields[] = $field_name;
      }
      $type = $field['type'];
      if (!isset($counts[$type])) $counts[$type] = 0;
      $counts[$type]++;
    }
    foreach ($counts AS $type => $count) {
      $build['schema_info']['#items'][] = array(ucfirst($type), $count);
    }
    if ($unused_fields) {
      $build['schema_info']['#items'][] = array(t('Unused fields'), theme('item_list', array('items' => $unused_fields)));
    }
  }
  return $build;
}

function &msm_settings() {
  $values =& drupal_static(__FUNCTION__);
  if (!isset($values)) {
    $values = msm_request('settings');
  }
  return $values;
}

function msm_setting_get($name, $default = NULL) {
  $settings = msm_settings();
  return isset($settings[$name]) ? $settings[$name] : $default;
}

function msm_setting_set($name, $value) {
  $result = msm_post(sprintf('setting/%s', $name), $value);
  dsm($result);
  drupal_static_reset('msm_settings');
}

function msm_settings_form($form, &$form_state, $settings = NULL) {
  if (!empty($form_state['values']['settings'])) {
    $settings = $form_state['values']['settings'];
  }
  elseif ($settings === NULL) {
    $settings = msm_request('settings');
  }
  $form['settings'] = array(
    '#tree' => TRUE,
  );
  $settings += array(
    'evalonboot' => NULL,
    'collectionpreprocess' => NULL,
    'collectionpostprocess' => NULL,
  );
  $form['settings']['evalonboot'] = array(
    '#title' => t('On Bootup'),
    '#type' => 'text_format',
    '#format' => 'catalyst_js',
    '#default_value' => $settings['evalonboot'],
    '#element_validate' => array('msm_text_format_validate'),
    '#after_build' => array('msm_text_format_after_build'),
    '#rows' => 30,
  );
  $form['settings']['collectionpreprocess'] = array(
    '#title' => t('Collection PreProcess'),
    '#type' => 'text_format',
    '#format' => 'catalyst_js',
    '#default_value' => $settings['collectionpreprocess'],
    '#element_validate' => array('msm_text_format_validate'),
    '#after_build' => array('msm_text_format_after_build'),
    '#rows' => 30,
  );
  $form['settings']['collectionpostprocess'] = array(
    '#title' => t('Collection PostProcess'),
    '#type' => 'text_format',
    '#format' => 'catalyst_js',
    '#default_value' => $settings['collectionpostprocess'],
    '#element_validate' => array('msm_text_format_validate'),
    '#after_build' => array('msm_text_format_after_build'),
    '#rows' => 30,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update System Settings'),
  );
  return $form;
}

function msm_settings_form_submit($form, &$form_state) {
  dsm($form_state);
  $result = msm_post('settings', $form_state['values']['settings']);
  sleep(1);
}
